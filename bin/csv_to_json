#!perl

use v5.20;
use open qw(:std :utf8);

use Text::CSV_XS;

package Mojo::File::Role::SlurpJSON {
	use Mojo::Base -role, -signatures;
	use Mojo::JSON qw(decode_json);

	sub slurp_json ( $self ) { decode_json( $self->slurp ) }
	}

package Mojo::File::Role::SpurtJSON {
	use Mojo::Base -role, -signatures;
	use Mojo::JSON qw(encode_json);

	sub spurt_json ( $self, $ds ) {
		$self->spurt( encode_json( $ds ) )
		}
	}

use Mojo::File;
my $MojoFile = Mojo::File->with_roles(qw(
	Mojo::File::Role::SlurpJSON
	Mojo::File::Role::SpurtJSON
	));

use Mojo::Util qw(dumper);
use Mojo::JSON qw(encode_json);

FILE: foreach my $file ( @ARGV ) {
	open my $fh, '<:encoding(UTF-8)', $file or do {
		warn "Could not open file <$file>: $!\n";
		next FILE;
		};

	my %hash;
	my $meta = $hash{meta} = {};

	chomp( $meta->{book} = <$fh> );
	chomp( $meta->{table} = <$fh> );
	chomp( my $epoch = <$fh> );
	( $meta->{epoch} ) = $epoch =~ m/(\d{4}-\d{2}-\d{2})/;

	chomp( my $headers = <$fh> );
	my @headers = split /,/, $headers;
	my @field_names = map { s/\A\S+\K\s-.*//r } @headers;

	my $csv = Text::CSV_XS->new( { binary => 1, auto_diag => 1 } );
	$csv->column_names( @field_names );

	my %fields = map { $field_names[$_] => $headers[$_] } 0 .. $#headers;
	$meta->{fields} = \%fields;

	my $data = $hash{data} = $csv->getline_hr_all( $fh );

	my $new_file = $file =~ s/\.csv\z/\.json/r;
	$MojoFile->new( $new_file )->spurt_json( \%hash );
	}


